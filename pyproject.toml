# pyproject.toml

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "transcribe_audio" # Replace with your desired project name
version = "0.1.0"       # Replace with your desired version
description = "Script for transcribing audio and summarizing" # Replace with a brief description
readme = "README.md"
requires-python = ">=3.13"
# Specify the license file
license = { file="LICENSE" }
keywords = ["transcribe", "ai", "assemblyai", "xai", "transcription", "summarization"]
authors = [
  { name="Bill", email="meokey2000@gmail.com" }, # Use your name, replace email if needed
]
classifiers = [ # Standard Trove Classifiers (https://pypi.org/classifiers/)
    "Programming Language :: Python :: 3",
    # Consider adding a classifier if a relevant one exists for source-available non-commercial licenses
    "Operating System :: OS Independent",
    # Add other classifiers relevant to your project
]

# dynamic = ["dependencies"] # Keep or remove based on whether you list deps below
# Define production dependencies
dependencies = [
    "assemblyai>=0.40.2,<1.0",
    "requests",
    "python-dotenv",
    "tenacity",
]
# Define optional/development dependencies
[project.optional-dependencies]
dev = [
    "pytest",
    "pylint",
    "flake8",
    "black",
    # Add any other packages only needed for development/testing
]

# [project.urls]
Homepage = ["https://github.com/meokey/transcribe_audio"]
"Bug Tracker" = "https://github.com/meokey/transcribe_audio/issues"

# Define command-line entry points (optional for a simple script, but good practice)
# This allows installing the script as a command: `transcribe-audio-command`
[project.scripts]
transcribe-audio-command = "transcribe_audio_app.transcribe_audio:main"


# Configuration for various development tools
[tool]

[tool.pytest]
# Configuration for pytest
addopts = "--verbose"
testpaths = ["tests"]

[tool.pylint]
# Configuration for pylint
max-line-length = 127
disable = [ # Example: Disable common warnings for scripts
   "C0114", # Missing module docstring (can be noisy for single-file scripts)
   "C0115", # Missing class docstring
   "C0116", # Missing function docstring
   "R0914", # Too many local variables
   "C0301", # Line too long (if handled by formatter)
   "W0611", # Unused import (if flake8 handles this)
]
# Good initial config might involve setting line length and enabling some checks
# You'll need to run pylint and tailor this config based on its output.

[tool.flake8]
max-line-length = 127

[tool.black]
line-length = 120
target-version = ['py313']

# [tool.isort]
# profile = "black"
# line_length = 120
